import torch
import os,glob
import random,csv
import visdom
import time
from torch.utils.data import Dataset,DataLoader
from torchvision import transforms
from PIL import Image
 
 
class trainloader(Dataset):
    def __init__(self,root, resize, mode):
        super(trainloader,self).__init__()
 
        self.root = root
        self.resize = resize
        #------------------------裁剪-----------------------
        #image, label
        self.images = self.load_csv('images.csv')
 
        if mode=='train':   #选60%的数据用于train
            self.images = self.images[:int(0.6*len(self.images))]
        elif mode == 'val':  #20%的数据用于validationn
            self.images = self.images[int(0.6*len(self.images)):int(0.8*len(self.images))]
        else:   #20%的数据用于test
            self.images = self.images[int(0.8*len(self.images)):]
        #-----------------------------------------------------------
 
 
    def load_csv(self,filename):
        #print(self.root)
        images = []
        #print(os.path.join(self.root,'*.pfm'))
        images += glob.glob(os.path.join(self.root,'*.pfm'))

        #1167,'dataset/pokemon\\bulbasaur\\00000000.png'
        print(len(images),images)
 
        #打乱一下
        random.shuffle(images)
 
        with open(os.path.join(self.root,filename),mode='w',newline='') as f:
            writer = csv.writer(f)
            for img in images:
                name = img.split(os.sep)[-2]
                #'dataset/pokemon\\bulbasaur\\00000000.png',0
                writer.writerow([img])
            print('write into csv file:',filename)
 
        #read from csv file
        images = []
        with open(os.path.join(self.root, filename)) as f:
            reader = csv.reader(f)
            for row in reader:
                #'dataset/pokemon\\bulbasaur\\00000000.png',0
                img = row
 
                images.append(img)

 
            return images
 
    def __len__(self):
        return len(self.images)
 
 
    def denormalize(self, x_hat):
        mean = [0.485,0.456,0.406]
        std = [0.229,0.224,0.225]
 
        #normalize的流程: x_hat = (x-mean)/std
        #我们要denormalize: x_hat*std + mean
        #x: [c,h,w]
        #mean: [3] => [3,1,1]
        mean = torch.tensor(mean).unsqueeze(1).unsqueeze(1)
        std = torch.tensor(std).unsqueeze(1).unsqueeze(1)
        x = x_hat * std + mean
 
        return x
 
    def __getitem__(self, idx):
        #idx的范围 [0~len(images)]
        #img:'dataset/pokemon\\bulbasaur\\00000000.png'
        #label : 0/1/2/3/4
        img,label = self.images[idx],self.labels[idx]
 
        tf = transforms.Compose([
            lambda x:Image.open(x).convert('RGB'),   #string path => image data
            transforms.Resize((int(self.resize*1.25), int(self.resize*1.25))), 
            transforms.RandomRotation(15),
            transforms.CenterCrop(self.resize),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485,0.456,0.406],
                                 std=[0.229,0.224,0.225])
        ])
 
        img = tf(img)
        label = torch.tensor(label)
        return img,label
 
 
 
def main():

    #建一个db对象
    db = trainloader('E:/monkaa__optical_flow/monkaa__optical_flow\optical_flow/eating_camera2_x2/into_future/left',64,'train')
 
    loader = DataLoader(db, batch_size=32, shuffle=True)


 
if __name__ == '__main__':
    main()
    
    import torch
import torch.nn as nn
from torch.nn.init import kaiming_normal_, constant_

def conv(batchNorm, in_planes, out_planes, kernel_size=3, stride=1):
    if batchNorm:
        return nn.Sequential(
            nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size-1)//2, bias=False),
            nn.BatchNorm2d(out_planes),
            nn.LeakyReLU(0.1,inplace=True)
        )
    else:
        return nn.Sequential(
            nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size-1)//2, bias=True),
            nn.LeakyReLU(0.1,inplace=True)
        )

def predict_flow(in_planes):
    return nn.Conv2d(in_planes,2,kernel_size=3,stride=1,padding=1,bias=False)

def deconv(in_planes, out_planes):
    return nn.Sequential(
        nn.ConvTranspose2d(in_planes, out_planes, kernel_size=4, stride=2, padding=1, bias=False),
        nn.LeakyReLU(0.1,inplace=True)
    )

def crop_like(input, target):
    if input.size()[2:] == target.size()[2:]:
        return input
    else:
        return input[:, :, :target.size(2), :target.size(3)]

__all__ = [
    'flownets', 'flownets_bn'
]


class FlowNetS(nn.Module):
    expansion = 1

    def __init__(self,batchNorm=True):
        super(FlowNetS,self).__init__()

        self.batchNorm = batchNorm
        self.conv1   = conv(self.batchNorm,   6,   64, kernel_size=7, stride=2)
        self.conv2   = conv(self.batchNorm,  64,  128, kernel_size=5, stride=2)
        self.conv3   = conv(self.batchNorm, 128,  256, kernel_size=5, stride=2)
        self.conv3_1 = conv(self.batchNorm, 256,  256)
        self.conv4   = conv(self.batchNorm, 256,  512, stride=2)
        self.conv4_1 = conv(self.batchNorm, 512,  512)
        self.conv5   = conv(self.batchNorm, 512,  512, stride=2)
        self.conv5_1 = conv(self.batchNorm, 512,  512)
        self.conv6   = conv(self.batchNorm, 512, 1024, stride=2)
        self.conv6_1 = conv(self.batchNorm,1024, 1024)

        self.deconv5 = deconv(1024,512)
        self.deconv4 = deconv(1026,256)
        self.deconv3 = deconv(770,128)
        self.deconv2 = deconv(386,64)

        self.predict_flow6 = predict_flow(1024)
        self.predict_flow5 = predict_flow(1026)
        self.predict_flow4 = predict_flow(770)
        self.predict_flow3 = predict_flow(386)
        self.predict_flow2 = predict_flow(194)

        self.upsampled_flow6_to_5 = nn.ConvTranspose2d(2, 2, 4, 2, 1, bias=False)
        self.upsampled_flow5_to_4 = nn.ConvTranspose2d(2, 2, 4, 2, 1, bias=False)
        self.upsampled_flow4_to_3 = nn.ConvTranspose2d(2, 2, 4, 2, 1, bias=False)
        self.upsampled_flow3_to_2 = nn.ConvTranspose2d(2, 2, 4, 2, 1, bias=False)

        for m in self.modules():
            if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):
                kaiming_normal_(m.weight, 0.1)
                if m.bias is not None:
                    constant_(m.bias, 0)
            elif isinstance(m, nn.BatchNorm2d):
                constant_(m.weight, 1)
                constant_(m.bias, 0)

    def forward(self, x):
        out_conv2 = self.conv2(self.conv1(x))
        out_conv3 = self.conv3_1(self.conv3(out_conv2))
        out_conv4 = self.conv4_1(self.conv4(out_conv3))
        out_conv5 = self.conv5_1(self.conv5(out_conv4))
        out_conv6 = self.conv6_1(self.conv6(out_conv5))

        flow6       = self.predict_flow6(out_conv6)
        flow6_up    = crop_like(self.upsampled_flow6_to_5(flow6), out_conv5)
        out_deconv5 = crop_like(self.deconv5(out_conv6), out_conv5)

        concat5 = torch.cat((out_conv5,out_deconv5,flow6_up),1)
        flow5       = self.predict_flow5(concat5)
        flow5_up    = crop_like(self.upsampled_flow5_to_4(flow5), out_conv4)
        out_deconv4 = crop_like(self.deconv4(concat5), out_conv4)

        concat4 = torch.cat((out_conv4,out_deconv4,flow5_up),1)
        flow4       = self.predict_flow4(concat4)
        flow4_up    = crop_like(self.upsampled_flow4_to_3(flow4), out_conv3)
        out_deconv3 = crop_like(self.deconv3(concat4), out_conv3)

        concat3 = torch.cat((out_conv3,out_deconv3,flow4_up),1)
        flow3       = self.predict_flow3(concat3)
        flow3_up    = crop_like(self.upsampled_flow3_to_2(flow3), out_conv2)
        out_deconv2 = crop_like(self.deconv2(concat3), out_conv2)

        concat2 = torch.cat((out_conv2,out_deconv2,flow3_up),1)
        flow2 = self.predict_flow2(concat2)

        if self.training:
            return flow2,flow3,flow4,flow5,flow6
        else:
            return flow2

    def weight_parameters(self):
        return [param for name, param in self.named_parameters() if 'weight' in name]

    def bias_parameters(self):
        return [param for name, param in self.named_parameters() if 'bias' in name]


def flownets(data=None):
    """FlowNetS model architecture from the
    "Learning Optical Flow with Convolutional Networks" paper (https://arxiv.org/abs/1504.06852)
    Args:
        data : pretrained weights of the network. will create a new one if not set
    """
    model = FlowNetS(batchNorm=False)
    if data is not None:
        model.load_state_dict(data['state_dict'])
    return model


def flownets_bn(data=None):
    """FlowNetS model architecture from the
    "Learning Optical Flow with Convolutional Networks" paper (https://arxiv.org/abs/1504.06852)
    Args:
        data : pretrained weights of the network. will create a new one if not set
    """
    model = FlowNetS(batchNorm=True)
    if data is not None:
        model.load_state_dict(data['state_dict'])
    return model

net = FlowNetS()

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)
net.to(device)
import torch.optim as optim
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

for epoch in range(2):
    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data
        optimizer.zero_grad()
        outputs = net(inputs.to(device))
        loss = criterion(outputs.to(device), labels.to(device))
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
        if i % 2000 == 1900:
            print('[%d, %5d] loss: %.3f'% (epoch + 1, i + 1, running_loss / 2000))
            running_loss = 0.0
print("Finished Training")
#############
TypeError                                 Traceback (most recent call last)
<ipython-input-17-50564376fa67> in <module>
      1 for epoch in range(2):
      2     running_loss = 0.0
----> 3     for i, data in enumerate(trainloader, 0):
      4         inputs, labels = data
      5         optimizer.zero_grad()

TypeError: 'type' object is not iterable
